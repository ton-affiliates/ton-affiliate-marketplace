global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;
global int __tact_randomized;

slice __tact_verify_address(slice address) impure inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_if(137, h == 1279);
    throw_unless(136, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

slice __tact_create_address(int chain, int hash) inline {
    var b = begin_cell();
    b = b.store_uint(2, 2);
    b = b.store_uint(0, 1);
    b = b.store_int(chain, 8);
    b = b.store_uint(hash, 256);
    var addr = b.end_cell().begin_parse();
    return __tact_verify_address(addr);
}

slice __tact_compute_contract_address(int chain, cell code, cell data) inline {
    var b = begin_cell();
    b = b.store_uint(0, 2);
    b = b.store_uint(3, 2);
    b = b.store_uint(0, 1);
    b = b.store_ref(code);
    b = b.store_ref(data);
    var hash = cell_hash(b.end_cell());
    return __tact_create_address(chain, hash);
}

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

(slice, slice, int) __tact_dict_min(cell dict, int key_len) asm(dict key_len -> 1 0 2) """
    DICTMIN  NULLSWAPIFNOT2
""";

(slice, slice, int) __tact_dict_next(cell dict, int key_len, slice pivot) asm(pivot dict key_len -> 1 0 2) """
    DICTGETNEXT NULLSWAPIFNOT2
""";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

() __tact_prepare_random() impure inline {
    if (null?(__tact_randomized)) {
        randomize_lt();
        __tact_randomized = true;
    }
}

builder __tact_store_bool(builder b, int v) inline {
    return b.store_int(v, 1);
}

(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl) inline {
    var (key, value, flag) = __tact_dict_min(d, kl);
    if (flag) {
        return (key, value~load_int(vl), flag);
    } else {
        return (null(), null(), flag);
    }
}

(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl) inline {
    var (key, value, flag) = __tact_dict_next(d, kl, pivot);
    if (flag) {
        return (key, value~load_int(vl), flag);
    } else {
        return (null(), null(), flag);
    }
}

int __tact_slice_eq_bits(slice a, slice b) inline {
    return equal_slices_bits(a, b);
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(135, ok);
    return data;
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_nativeRandomInterval(int $max) impure asm """
    RAND
""";

int $global_random(int $min, int $max) impure inline {
    __tact_prepare_random();
    return ($min + $global_nativeRandomInterval(($max - $min)));
}

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return __tact_compute_contract_address(0, $s'code, $s'data);
}

slice $global_myAddress() impure asm """
    MYADDR
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_nativeSendMessage(cell $cell, int $mode) impure asm """
    SENDRAWMSG
""";

int $global_nativeSendMessageReturnForwardFee(cell $msg, int $mode) impure asm """
    SENDMSG
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeRef(builder $self, cell $cell) impure asm($cell $self) """
    STREF
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = $global_beginCell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = $Builder$_fun_storeCoins($b, $params'value);
    $b = store_int($b, 0, 105);
    if (( ((~ null?($params'code))) ? (true) : ((~ null?($params'data))) )) {
        $b = __tact_store_bool($b, true);
        builder $bc = $global_beginCell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = $Builder$_fun_storeRef($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = $Builder$_fun_storeRef($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = $Builder$_fun_storeRef($b, $Builder$_fun_endCell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = $Builder$_fun_storeRef($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = $Builder$_fun_endCell($b);
    return $global_nativeSendMessageReturnForwardFee($c, $params'mode);
}

() $global_emit(cell $body) impure inline {
    cell $c = $Builder$_fun_endCell($Builder$_fun_storeRef(store_uint($global_beginCell(), 15211807202738752817960438464513, 104), $body));
    $global_nativeSendMessage($c, 0);
}

((slice, int, slice, int, slice, cell, int, int), ()) $AffiliateMarketplace$_fun_forward((slice, int, slice, int, slice, cell, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'owner, $self'stopped, $self'bot, $self'numCampaigns, $self'usdtMasterAddress, $self'usdtWalletBytecode, $self'affiliateFeePercentage, $self'advertiserFeePercentage)) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return (($self'owner, $self'stopped, $self'bot, $self'numCampaigns, $self'usdtMasterAddress, $self'usdtWalletBytecode, $self'affiliateFeePercentage, $self'advertiserFeePercentage), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return (($self'owner, $self'stopped, $self'bot, $self'numCampaigns, $self'usdtMasterAddress, $self'usdtWalletBytecode, $self'affiliateFeePercentage, $self'advertiserFeePercentage), ());
}

((slice, int, slice, int, slice, cell, int, int), ()) $AffiliateMarketplace$_fun_reply((slice, int, slice, int, slice, cell, int, int) $self, cell $body) impure inline {
    var (($self'owner, $self'stopped, $self'bot, $self'numCampaigns, $self'usdtMasterAddress, $self'usdtWalletBytecode, $self'affiliateFeePercentage, $self'advertiserFeePercentage)) = $self;
    ($self'owner, $self'stopped, $self'bot, $self'numCampaigns, $self'usdtMasterAddress, $self'usdtWalletBytecode, $self'affiliateFeePercentage, $self'advertiserFeePercentage)~$AffiliateMarketplace$_fun_forward(__tact_context_get_sender(), $body, true, null());
    return (($self'owner, $self'stopped, $self'bot, $self'numCampaigns, $self'usdtMasterAddress, $self'usdtWalletBytecode, $self'affiliateFeePercentage, $self'advertiserFeePercentage), ());
}

((slice, int, slice, int, slice, cell, int, int), ()) $AffiliateMarketplace$_fun_notify((slice, int, slice, int, slice, cell, int, int) $self, cell $body) impure inline {
    var (($self'owner, $self'stopped, $self'bot, $self'numCampaigns, $self'usdtMasterAddress, $self'usdtWalletBytecode, $self'affiliateFeePercentage, $self'advertiserFeePercentage)) = $self;
    ($self'owner, $self'stopped, $self'bot, $self'numCampaigns, $self'usdtMasterAddress, $self'usdtWalletBytecode, $self'affiliateFeePercentage, $self'advertiserFeePercentage)~$AffiliateMarketplace$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return (($self'owner, $self'stopped, $self'bot, $self'numCampaigns, $self'usdtMasterAddress, $self'usdtWalletBytecode, $self'affiliateFeePercentage, $self'advertiserFeePercentage), ());
}