server {
    # listen ${VITE_SERVER_PORT}; # Placeholder for the server port (e.g., 80)
    listen ${VITE_SERVER_PORT};

    server_name ${VITE_SERVER_NAME}; # Placeholder for the server name (e.g., tonaffiliates.com)

    # Serve the main application files
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri /index.html;

        # CORS headers for SPA routing and preflight requests
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $host; # Restrict to requests from this Nginx server
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            return 204;
        }
    }

    # Serve static assets
    location /assets/ {
        root /usr/share/nginx/html;
        add_header Access-Control-Allow-Origin $host; # Restrict to requests from this Nginx server
    }

    # Serve TonConnect manifest file
    location /tonconnect-manifest.json {
        root /usr/share/nginx/html;
        add_header Access-Control-Allow-Origin $host; # Restrict to requests from this Nginx server
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";
    }

    # Proxy API requests to the backend
    location /api/ {
        proxy_pass ${BACKEND_URL}; # Replace with your backend's actual URL
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;

        # Allow all HTTP methods restricted to Nginx frontend
        add_header Access-Control-Allow-Origin $host; # Restrict to requests from this Nginx server
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";

        if ($request_method = OPTIONS) {
            return 204;
        }
    }

    location /ws/ {
        proxy_pass ${BACKEND_URL}; # Replace with your backend's actual WebSocket URL (e.g., ws://web-server:3000)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }



    # Error handling for forbidden requests
    error_page 403 /403.html;
}
